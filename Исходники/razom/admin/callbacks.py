
from typing import Dict

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.dispatcher import Dispatcher
from aiogram.utils.callback_data import CallbackData
from aiogram_dialog import DialogManager, StartMode
from client.models import Client, Moderation
from client.states import BaseClientCabinetState
from config import ADMIN, bot, dp
from loguru import logger

from .dialogs.moderation import get_moderation_photo

single_photo = CallbackData('client_post', 'action', 'id')
extended_paginator_cb = CallbackData("base_paginator", 'page', 'action')


async def send_notification_to_user(user_id: int, status: bool):
    if status:
        await bot.send_message(user_id, "‚úÖ –í–∞—à–µ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É @razomshop –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏–ª–∏ —ç—Ç–æ–≥–æ")
    else:
        await bot.send_message(user_id, "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–†–æ–∑—ã–≥—Ä—ã—à'")


@dp.callback_query_handler(extended_paginator_cb.filter(action=['moderaion_nav']))
async def nav_between_moderation_image(query: types.CallbackQuery, callback_data: Dict[str, str]):
    logger.debug("NAVIGATWAERSD")

    await bot.delete_message(query.from_user.id, message_id=query.message.message_id)
    logger.debug(callback_data['page'])

    photo, markup = await get_moderation_photo(page=int(callback_data['page']))
    await bot.send_photo(query.from_user.id, photo=photo, reply_markup=markup)


@dp.callback_query_handler(single_photo.filter(action=['accept_moder', 'dec_moder']))
async def accept_or_decline_photo(query: types.CallbackQuery, callback_data: Dict[str, str]):
    if callback_data['action'] == "accept_moder":
        client = await Client.get(telegram_id=callback_data["id"])
        client.moderation_accept = True
        client.generate_personal_number()
        await client.save()
        await Moderation.filter(user_id=callback_data["id"]).delete()
        await bot.delete_message(query.from_user.id, message_id=query.message.message_id)
        await send_notification_to_user(int(callback_data["id"]), status=True)
        photo, markup = await get_moderation_photo(page=1)
        await bot.send_photo(query.from_user.id, photo=photo, reply_markup=markup)
    elif callback_data['action'] == "dec_moder":
        client = await Client.get(telegram_id=callback_data["id"])
        client.moderation_accept = False
        await client.save()
        await Moderation.filter(user_id=callback_data["id"]).delete()
        await bot.delete_message(query.from_user.id, message_id=query.message.message_id)
        await send_notification_to_user(int(callback_data["id"]), status=False)
        photo, markup = await get_moderation_photo(page=1)
        await bot.send_photo(query.from_user.id, photo=photo, reply_markup=markup)
